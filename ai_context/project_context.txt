--- Project Context for AI Assistant ---

Project Root: /home/yigit/Desktop/library-management
Generated On: 1760276097.5472212

--- Project Structure ---
├── .gitattributes
├── .gitignore
├── .mvn
│   └── wrapper
│       └── maven-wrapper.properties
├── HELP.md
├── README.md
├── mvnw
├── mvnw.cmd
├── pom.xml
└── src
    ├── main
    │   ├── java
    │   │   └── com
    │   │       └── library
    │   │           └── librarymanagement
    │   │               ├── LibraryManagementApplication.java
    │   │               ├── config
    │   │               │   └── ModelMapperConfig.java
    │   │               ├── controller
    │   │               │   ├── BookController.java
    │   │               │   ├── BorrowerController.java
    │   │               │   └── MemberController.java
    │   │               ├── dto
    │   │               │   ├── BookDto.java
    │   │               │   ├── BorrowerDto.java
    │   │               │   └── MemberDto.java
    │   │               ├── exception
    │   │               │   ├── GlobalExceptionHandler.java
    │   │               │   └── ResourceNotFoundException.java
    │   │               ├── model
    │   │               │   ├── Book.java
    │   │               │   ├── Borrower.java
    │   │               │   └── Member.java
    │   │               ├── repository
    │   │               │   ├── BookRepository.java
    │   │               │   ├── BorrowerRepository.java
    │   │               │   └── MemberRepository.java
    │   │               └── service
    │   │                   ├── BookService.java
    │   │                   ├── BorrowerService.java
    │   │                   └── MemberService.java
    │   └── resources
    │       └── application.properties
    └── test
        └── java
            └── com
                └── library
                    └── librarymanagement
                        └── LibraryManagementApplicationTests.java

--- Project Files Content ---

--- FILE: pom.xml ---
<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>3.5.6</version>
        <relativePath/> <!-- lookup parent from repository -->
    </parent>
    <groupId>com.library</groupId>
    <artifactId>library-management</artifactId>
    <version>0.0.1-SNAPSHOT</version>
    <name>library-management</name>
    <description>library-management</description>
    <url/>
    <licenses>
        <license/>
    </licenses>
    <developers>
        <developer/>
    </developers>
    <scm>
        <connection/>
        <developerConnection/>
        <tag/>
        <url/>
    </scm>
    <properties>
        <java.version>17</java.version>
    </properties>
    <dependencies>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-data-redis</artifactId>
        </dependency>

        <dependency>
            <groupId>org.modelmapper</groupId>
            <artifactId>modelmapper</artifactId>
            <version>3.1.1</version>
        </dependency>

        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-data-jpa</artifactId>
        </dependency>

        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>

        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-devtools</artifactId>
            <scope>runtime</scope>
            <optional>true</optional>
        </dependency>
        <dependency>
            <groupId>com.mysql</groupId>
            <artifactId>mysql-connector-j</artifactId>
            <scope>runtime</scope>
        </dependency>
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
            <optional>true</optional>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
        </dependency>
    </dependencies>

    <build>
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <configuration>
                    <annotationProcessorPaths>
                        <path>
                            <groupId>org.projectlombok</groupId>
                            <artifactId>lombok</artifactId>
                        </path>
                    </annotationProcessorPaths>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
                <configuration>
                    <excludes>
                        <exclude>
                            <groupId>org.projectlombok</groupId>
                            <artifactId>lombok</artifactId>
                        </exclude>
                    </excludes>
                </configuration>
            </plugin>
        </plugins>
    </build>

</project>

--- END FILE ---

--- FILE: src/test/java/com/library/librarymanagement/LibraryManagementApplicationTests.java ---
package com.library.librarymanagement;

import org.junit.jupiter.api.Test;
import org.springframework.boot.test.context.SpringBootTest;

@SpringBootTest
class LibraryManagementApplicationTests {

    @Test
    void contextLoads() {
    }

}

--- END FILE ---

--- FILE: src/main/java/com/library/librarymanagement/LibraryManagementApplication.java ---
package com.library.librarymanagement;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.cache.annotation.EnableCaching;

@SpringBootApplication
@EnableCaching
public class LibraryManagementApplication {

    public static void main(String[] args) {
        SpringApplication.run(LibraryManagementApplication.class, args);
    }
}
--- END FILE ---

--- FILE: src/main/java/com/library/librarymanagement/exception/GlobalExceptionHandler.java ---
package com.library.librarymanagement.exception;

import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.ControllerAdvice;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.context.request.WebRequest;

import java.time.LocalDateTime;
import java.util.LinkedHashMap;
import java.util.Map;

@ControllerAdvice
public class GlobalExceptionHandler {

    @ExceptionHandler(ResourceNotFoundException.class)
    public ResponseEntity<Object> handleResourceNotFoundException(
            ResourceNotFoundException ex, WebRequest request) {

        Map<String, Object> body = new LinkedHashMap<>();
        body.put("timestamp", LocalDateTime.now());
        body.put("message", ex.getMessage());

        return new ResponseEntity<>(body, HttpStatus.NOT_FOUND);
    }
}
--- END FILE ---

--- FILE: src/main/java/com/library/librarymanagement/exception/ResourceNotFoundException.java ---
package com.library.librarymanagement.exception;

import org.springframework.http.HttpStatus;
import org.springframework.web.bind.annotation.ResponseStatus;

@ResponseStatus(value = HttpStatus.NOT_FOUND)
public class ResourceNotFoundException extends RuntimeException {
    public ResourceNotFoundException(String message) {
        super(message);
    }
}
--- END FILE ---

--- FILE: src/main/java/com/library/librarymanagement/dto/BorrowerDto.java ---
package com.library.librarymanagement.dto;

import lombok.Data;
import java.time.LocalDate;

@Data
public class BorrowerDto {
    private Long id;
    private Long memberId;
    private String memberName;
    private Long bookId;
    private String bookTitle;
    private LocalDate issueDate;
    private LocalDate dueDate;
    private LocalDate returnDate;
}
--- END FILE ---

--- FILE: src/main/java/com/library/librarymanagement/dto/BookDto.java ---
package com.library.librarymanagement.dto;

import lombok.Data;
import java.time.LocalDate;

@Data
public class BookDto {
    private Long id;
    private String title;
    private String publisher;
    private LocalDate publishDate;
}
--- END FILE ---

--- FILE: src/main/java/com/library/librarymanagement/dto/MemberDto.java ---
package com.library.librarymanagement.dto;

import lombok.Data;

@Data
public class MemberDto {
    private Long id;
    private String name;
    private String address;
    private String telephone;
}
--- END FILE ---

--- FILE: src/main/java/com/library/librarymanagement/config/ModelMapperConfig.java ---
package com.library.librarymanagement.config;

import org.modelmapper.ModelMapper;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

@Configuration
public class ModelMapperConfig {
    @Bean
    public ModelMapper modelMapper() {
        return new ModelMapper();
    }
}
--- END FILE ---

--- FILE: src/main/java/com/library/librarymanagement/service/MemberService.java ---
package com.library.librarymanagement.service;

import com.library.librarymanagement.exception.ResourceNotFoundException;
import com.library.librarymanagement.model.Member;
import com.library.librarymanagement.repository.MemberRepository;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.cache.annotation.CacheEvict;
import org.springframework.cache.annotation.CachePut;
import org.springframework.cache.annotation.Cacheable;
import org.springframework.stereotype.Service;

import java.util.List;

@Service
public class MemberService {

    private static final Logger log = LoggerFactory.getLogger(MemberService.class);
    private final MemberRepository memberRepository;

    @Autowired
    public MemberService(MemberRepository memberRepository) {
        this.memberRepository = memberRepository;
    }

    public List<Member> findAllMembers() {
        log.info("Fetching all members from the database...");
        return memberRepository.findAll();
    }

    @Cacheable(value = "members", key = "#id")
    public Member findMemberById(Long id) {
        log.info("Fetching member from database: id={}", id);
        return memberRepository.findById(id)
                .orElseThrow(() -> new ResourceNotFoundException("Member not found with id: " + id));
    }

    public Member saveMember(Member member) {
        log.info("Saving new member to the database...");
        return memberRepository.save(member);
    }

    @CachePut(value = "members", key = "#id")
    public Member updateMember(Long id, Member memberDetails) {
        log.info("Updating member and cache: id={}", id);
        Member member = memberRepository.findById(id)
                .orElseThrow(() -> new ResourceNotFoundException("Member not found with id: " + id));

        member.setName(memberDetails.getName());
        member.setAddress(memberDetails.getAddress());
        member.setTelephone(memberDetails.getTelephone());

        return memberRepository.save(member);
    }

    @CacheEvict(value = "members", key = "#id")
    public void deleteMemberById(Long id) {
        log.info("Deleting member and evicting from cache: id={}", id);
        if(!memberRepository.existsById(id)) {
            throw new ResourceNotFoundException("Member not found with id: " + id);
        }
        memberRepository.deleteById(id);
    }
}
--- END FILE ---

--- FILE: src/main/java/com/library/librarymanagement/service/BorrowerService.java ---
package com.library.librarymanagement.service;

import com.library.librarymanagement.model.Book;
import com.library.librarymanagement.model.Borrower;
import com.library.librarymanagement.model.Member;
import com.library.librarymanagement.repository.BorrowerRepository;
import com.library.librarymanagement.repository.BookRepository;
import com.library.librarymanagement.repository.MemberRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.time.LocalDate;
import java.util.List;
import java.util.Optional;

@Service
public class BorrowerService {

    private final BorrowerRepository borrowerRepository;
    private final MemberRepository memberRepository;
    private final BookRepository bookRepository;

    @Autowired
    public BorrowerService(BorrowerRepository borrowerRepository, MemberRepository memberRepository, BookRepository bookRepository) {
        this.borrowerRepository = borrowerRepository;
        this.memberRepository = memberRepository;
        this.bookRepository = bookRepository;
    }

    public List<Borrower> findAllBorrowings() {
        return borrowerRepository.findAllWithMemberAndBook();
    }
    public Optional<Borrower> findBorrowingById(Long id) {
        return borrowerRepository.findById(id);
    }

    @Transactional
    public Borrower issueBook(Long memberId, Long bookId, LocalDate issueDate, LocalDate dueDate) {
        Member member = memberRepository.findById(memberId)
                .orElseThrow(() -> new IllegalArgumentException("Member not found with ID: " + memberId));
        Book book = bookRepository.findById(bookId)
                .orElseThrow(() -> new IllegalArgumentException("Book not found with ID: " + bookId));

        Borrower borrower = new Borrower();
        borrower.setMember(member);
        borrower.setBook(book);
        borrower.setIssueDate(issueDate);
        borrower.setDueDate(dueDate);

        return borrowerRepository.save(borrower);
    }

    @Transactional
    public Borrower returnBook(Long borrowingId, LocalDate returnDate) {
        Borrower borrower = borrowerRepository.findByIdWithMemberAndBook(borrowingId)
                .orElseThrow(() -> new IllegalArgumentException("Borrowing record not found with ID: " + borrowingId));

        if (borrower.getReturnDate() != null) {
            throw new IllegalStateException("Book already returned for borrowing ID: " + borrowingId);
        }
        borrower.setReturnDate(returnDate);
        return borrower;
    }

    public void deleteBorrowingById(Long id) {
        borrowerRepository.deleteById(id);
    }

    // You can add more specific business logic here later, e.g., for overdue books.
}
--- END FILE ---

--- FILE: src/main/java/com/library/librarymanagement/service/BookService.java ---
package com.library.librarymanagement.service;

import com.library.librarymanagement.exception.ResourceNotFoundException;
import com.library.librarymanagement.model.Book;
import com.library.librarymanagement.repository.BookRepository;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.cache.annotation.CacheEvict;
import org.springframework.cache.annotation.CachePut;
import org.springframework.cache.annotation.Cacheable;
import org.springframework.stereotype.Service;

import java.util.List;

@Service
public class BookService {

    private static final Logger log = LoggerFactory.getLogger(BookService.class);
    private final BookRepository bookRepository;

    @Autowired
    public BookService(BookRepository bookRepository) {
        this.bookRepository = bookRepository;
    }

    public List<Book> findAllBooks() {
        log.info("Fetching all books from the database...");
        return bookRepository.findAll();
    }

    @Cacheable(value = "books", key = "#id")
    public Book findBookById(Long id) {
        log.info("Fetching book from database: id={}", id);
        return bookRepository.findById(id)
                .orElseThrow(() -> new ResourceNotFoundException("Book not found with id: " + id));
    }

    public Book saveBook(Book book) {
        log.info("Saving new book to the database...");
        return bookRepository.save(book);
    }

    @CachePut(value = "books", key = "#id")
    public Book updateBook(Long id, Book bookDetails) {
        log.info("Updating book and cache: id={}", id);
        Book book = bookRepository.findById(id)
                .orElseThrow(() -> new ResourceNotFoundException("Book not found with id: " + id));

        book.setTitle(bookDetails.getTitle());
        book.setPublisher(bookDetails.getPublisher());
        book.setPublishDate(bookDetails.getPublishDate());

        return bookRepository.save(book);
    }

    @CacheEvict(value = "books", key = "#id")
    public void deleteBookById(Long id) {
        log.info("Deleting book and evicting from cache: id={}", id);
        if (!bookRepository.existsById(id)) {
            throw new ResourceNotFoundException("Book not found with id: " + id);
        }
        bookRepository.deleteById(id);
    }
}
--- END FILE ---

--- FILE: src/main/java/com/library/librarymanagement/model/Borrower.java ---
package com.library.librarymanagement.model;

import jakarta.persistence.*;
import lombok.Data;
import lombok.NoArgsConstructor;
import lombok.AllArgsConstructor;

import java.io.Serializable;
import java.time.LocalDate;

@Entity
@Table(name = "borrowers")
@Data
@NoArgsConstructor
@AllArgsConstructor
public class Borrower implements Serializable {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    // --- Relationships ---
    // Many Borrowers can belong to one Member (many-to-one relationship)
    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "member_id", nullable = false)
    private Member member;

    // Many Borrowers can refer to one Book (many-to-one relationship)
    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "book_id", nullable = false)
    private Book book;

    @Column(name = "issue_date", nullable = false)
    private LocalDate issueDate;

    @Column(name = "due_date", nullable = false)
    private LocalDate dueDate;

    @Column(name = "return_date")
    private LocalDate returnDate;

    public void setMemberAndBook(Member member, Book book) {
        this.member = member;
        this.book = book;
        member.getBorrowings().add(this);
        book.getBorrowings().add(this);
    }
}
--- END FILE ---

--- FILE: src/main/java/com/library/librarymanagement/model/Member.java ---
package com.library.librarymanagement.model;

import jakarta.persistence.*;
import lombok.Data;
import lombok.NoArgsConstructor;
import lombok.AllArgsConstructor;

import java.io.Serializable;
import java.util.HashSet;
import java.util.Set;

@Entity
@Table(name = "members")
@Data
@NoArgsConstructor
@AllArgsConstructor
public class Member implements Serializable {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    @Column(name = "name", length = 255, nullable = false)
    private String name;

    @Column(name = "address", length = 255)
    private String address;

    @Column(name = "telephone", length = 15)
    private String telephone;

    // --- Relationship with Borrowers ---
    // A Member can have many Borrower records (one-to-many relationship)
    @OneToMany(mappedBy = "member", cascade = CascadeType.ALL, fetch = FetchType.LAZY)
    private Set<Borrower> borrowings = new HashSet<>();
}
--- END FILE ---

--- FILE: src/main/java/com/library/librarymanagement/model/Book.java ---
package com.library.librarymanagement.model;

import jakarta.persistence.*;
import lombok.Data;
import lombok.NoArgsConstructor;
import lombok.AllArgsConstructor;

import java.io.Serializable;
import java.time.LocalDate;
import java.util.HashSet;
import java.util.Set;

@Entity
@Table(name = "books")
@Data
@NoArgsConstructor
@AllArgsConstructor
public class Book implements Serializable {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    @Column(name = "title", length = 255, nullable = false)
    private String title;

    @Column(name = "publisher", length = 32)
    private String publisher;

    @Column(name = "publish_date")
    private LocalDate publishDate;

    // A Book can be part of many Borrower records (one-to-many relationship)
    @OneToMany(mappedBy = "book", cascade = CascadeType.ALL, fetch = FetchType.LAZY)
    private Set<Borrower> borrowings = new HashSet<>();
}
--- END FILE ---

--- FILE: src/main/java/com/library/librarymanagement/controller/MemberController.java ---
package com.library.librarymanagement.controller;

import com.library.librarymanagement.dto.MemberDto;
import com.library.librarymanagement.model.Member;
import com.library.librarymanagement.service.MemberService;
import org.modelmapper.ModelMapper;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.List;
import java.util.stream.Collectors;

@RestController
@RequestMapping("/api/members")
public class MemberController {

    private final MemberService memberService;
    private final ModelMapper modelMapper;

    @Autowired
    public MemberController(MemberService memberService, ModelMapper modelMapper) {
        this.memberService = memberService;
        this.modelMapper = modelMapper;
    }

    @GetMapping
    public List<MemberDto> getAllMembers() {
        return memberService.findAllMembers().stream()
                .map(member -> modelMapper.map(member, MemberDto.class))
                .collect(Collectors.toList());
    }

    @GetMapping("/{id}")
    public ResponseEntity<MemberDto> getMemberById(@PathVariable Long id) {
        Member member = memberService.findMemberById(id);
        MemberDto memberDto = modelMapper.map(member, MemberDto.class);
        return ResponseEntity.ok(memberDto);
    }

    @PostMapping
    public ResponseEntity<MemberDto> createMember(@RequestBody MemberDto memberDto) {
        Member memberRequest = modelMapper.map(memberDto, Member.class);
        Member createdMember = memberService.saveMember(memberRequest);
        MemberDto memberResponse = modelMapper.map(createdMember, MemberDto.class);
        return new ResponseEntity<>(memberResponse, HttpStatus.CREATED);
    }

    @PutMapping("/{id}")
    public ResponseEntity<MemberDto> updateMember(@PathVariable Long id, @RequestBody MemberDto memberDto) {
        Member memberRequest = modelMapper.map(memberDto, Member.class);
        Member updatedMember = memberService.updateMember(id, memberRequest);
        MemberDto memberResponse = modelMapper.map(updatedMember, MemberDto.class);
        return ResponseEntity.ok(memberResponse);
    }

    @DeleteMapping("/{id}")
    public ResponseEntity<Void> deleteMember(@PathVariable Long id) {
        memberService.deleteMemberById(id);
        return ResponseEntity.noContent().build();
    }
}
--- END FILE ---

--- FILE: src/main/java/com/library/librarymanagement/controller/BookController.java ---
package com.library.librarymanagement.controller;

import com.library.librarymanagement.dto.BookDto;
import com.library.librarymanagement.model.Book;
import com.library.librarymanagement.service.BookService;
import org.modelmapper.ModelMapper;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.List;
import java.util.stream.Collectors;

@RestController
@RequestMapping("/api/books")
public class BookController {

    private final BookService bookService;
    private final ModelMapper modelMapper;

    @Autowired
    public BookController(BookService bookService, ModelMapper modelMapper) {
        this.bookService = bookService;
        this.modelMapper = modelMapper;
    }

    @GetMapping
    public List<BookDto> getAllBooks() {
        return bookService.findAllBooks().stream()
                .map(book -> modelMapper.map(book, BookDto.class))
                .collect(Collectors.toList());
    }

    @GetMapping("/{id}")
    public ResponseEntity<BookDto> getBookById(@PathVariable Long id) {
        Book book = bookService.findBookById(id);
        BookDto bookDto = modelMapper.map(book, BookDto.class);
        return ResponseEntity.ok(bookDto);
    }

    @PostMapping
    public ResponseEntity<BookDto> createBook(@RequestBody BookDto bookDto) {
        Book bookRequest = modelMapper.map(bookDto, Book.class);
        Book createdBook = bookService.saveBook(bookRequest);
        BookDto bookResponse = modelMapper.map(createdBook, BookDto.class);
        return new ResponseEntity<>(bookResponse, HttpStatus.CREATED);
    }

    @PutMapping("/{id}")
    public ResponseEntity<BookDto> updateBook(@PathVariable Long id, @RequestBody BookDto bookDto) {
        Book bookRequest = modelMapper.map(bookDto, Book.class);
        Book updatedBook = bookService.updateBook(id, bookRequest);
        BookDto bookResponse = modelMapper.map(updatedBook, BookDto.class);
        return ResponseEntity.ok(bookResponse);
    }

    @DeleteMapping("/{id}")
    public ResponseEntity<Void> deleteBook(@PathVariable Long id) {
        bookService.deleteBookById(id);
        return ResponseEntity.noContent().build();
    }
}
--- END FILE ---

--- FILE: src/main/java/com/library/librarymanagement/controller/BorrowerController.java ---
package com.library.librarymanagement.controller;

import com.library.librarymanagement.dto.BorrowerDto;
import com.library.librarymanagement.model.Borrower;
import com.library.librarymanagement.service.BorrowerService;
import org.modelmapper.ModelMapper;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.time.LocalDate;
import java.util.List;
import java.util.stream.Collectors;

@RestController
@RequestMapping("/api/borrowings")
public class BorrowerController {

    private final BorrowerService borrowerService;
    private final ModelMapper modelMapper;

    @Autowired
    public BorrowerController(BorrowerService borrowerService, ModelMapper modelMapper) {
        this.borrowerService = borrowerService;
        this.modelMapper = modelMapper;
    }

    private BorrowerDto convertToDto(Borrower borrower) {
        BorrowerDto borrowerDto = modelMapper.map(borrower, BorrowerDto.class);
        borrowerDto.setMemberId(borrower.getMember().getId());
        borrowerDto.setMemberName(borrower.getMember().getName());
        borrowerDto.setBookId(borrower.getBook().getId());
        borrowerDto.setBookTitle(borrower.getBook().getTitle());
        return borrowerDto;
    }

    @GetMapping
    public List<BorrowerDto> getAllBorrowings() {
        return borrowerService.findAllBorrowings().stream()
                .map(this::convertToDto)
                .collect(Collectors.toList());
    }

    @PostMapping("/issue")
    public ResponseEntity<BorrowerDto> issueBook(@RequestBody BorrowerDto borrowerDto) {
        Borrower newBorrowing = borrowerService.issueBook(
                borrowerDto.getMemberId(),
                borrowerDto.getBookId(),
                borrowerDto.getIssueDate(),
                borrowerDto.getDueDate()
        );
        return new ResponseEntity<>(convertToDto(newBorrowing), HttpStatus.CREATED);
    }

    @PutMapping("/{id}/return")
    public ResponseEntity<BorrowerDto> returnBook(@PathVariable Long id) {
        Borrower returnedBorrowing = borrowerService.returnBook(id, LocalDate.now());
        return ResponseEntity.ok(convertToDto(returnedBorrowing));
    }

    @DeleteMapping("/{id}")
    public ResponseEntity<Void> deleteBorrowing(@PathVariable Long id) {
        borrowerService.deleteBorrowingById(id);
        return ResponseEntity.noContent().build();
    }
}
--- END FILE ---

--- FILE: src/main/java/com/library/librarymanagement/repository/BorrowerRepository.java ---
package com.library.librarymanagement.repository;

import com.library.librarymanagement.model.Borrower;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;
import org.springframework.stereotype.Repository;

import java.util.List;
import java.util.Optional;

@Repository
public interface BorrowerRepository extends JpaRepository<Borrower, Long> {

    @Query("SELECT b FROM Borrower b JOIN FETCH b.member JOIN FETCH b.book")
    List<Borrower> findAllWithMemberAndBook();

    @Query("SELECT b FROM Borrower b JOIN FETCH b.member JOIN FETCH b.book WHERE b.id = :id")
    Optional<Borrower> findByIdWithMemberAndBook(@Param("id") Long id);
}
--- END FILE ---

--- FILE: src/main/java/com/library/librarymanagement/repository/BookRepository.java ---
package com.library.librarymanagement.repository;

import com.library.librarymanagement.model.Book;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

@Repository
public interface BookRepository extends JpaRepository<Book, Long> {
    // Inherits basic CRUD operations
}
--- END FILE ---

--- FILE: src/main/java/com/library/librarymanagement/repository/MemberRepository.java ---
package com.library.librarymanagement.repository;

import com.library.librarymanagement.model.Member;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

@Repository
public interface MemberRepository extends JpaRepository<Member, Long> {
    // This interface automatically inherits methods like save(), findById(), findAll(), deleteById(), etc.
}
--- END FILE ---

--- FILE: src/main/resources/application.properties ---
spring.application.name=library-management
# --- Database Configuration ---
#spring.datasource.url=${SPRING_DATASOURCE_URL}
#spring.datasource.username=${SPRING_DATASOURCE_USERNAME}
#spring.datasource.password=${SPRING_DATASOURCE_PASSWORD}
spring.datasource.url="jdbc:mysql://localhost:3306/library_db?useSSL\=false&serverTimezone\=UTC&allowPublicKeyRetrieval\=true"
spring.datasource.username="library_user"
spring.datasource.password="library_password"

spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver

# --- Redis Configuration ---
spring.data.redis.host=localhost
spring.data.redis.port=6379


# --- JPA/Hibernate Configuration ---
# ddl-auto options:
#   - none: No DDL operations will be performed. (Production)
#   - update: Updates schema if needed. (Development)
#   - create: Creates schema, but drops previous data. (Testing)
#   - create-drop: Creates schema, then drops it when the session closes. (Testing)
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.format_sql=true
spring.jpa.open-in-view=false


--- END FILE ---

--- FILE: .mvn/wrapper/maven-wrapper.properties ---
wrapperVersion=3.3.4
distributionType=only-script
distributionUrl=https://repo.maven.apache.org/maven2/org/apache/maven/apache-maven/3.9.11/apache-maven-3.9.11-bin.zip

--- END FILE ---

--- End of Project Context ---
